/**
 * Benchmarks algorithm with every type of graph from the graph directory.
 */
const fs = require("fs");
const path = require("path");
const exec = require("child_process").exec;
const readline = require("readline");

const graphDirectory = path.join(__dirname, "graphs");

const getGraphFileNames = () => {
  return fs.readdirSync(graphDirectory);
};

/**
 * Removes result files generated by the java application
 */
const removeOutputFiles = async () => {
  console.log("Removing Output Graph Files");

  const files = fs.readdirSync(graphDirectory);
  // rudimentary filter!! warning
  const outputFilenames = files.filter((fn) => fn.includes("output"));
  console.log(`Found ${outputFilenames.length} files to remove`);

  if (outputFilenames.length === 0) return;

  /*****************************************************/
  /**
   * Uncomment this code if we want user confirmation for deleting files.
   */
  // const rl = readline.createInterface({
  //   input: process.stdin,
  //   output: process.stdout,
  // });
  //
  // const ok = await new Promise((resolve) => {
  //   rl.question('Are you sure? [Y/n]:', (answer) => {
  //     if (answer.trim() === '') {
  //       resolve(true)
  //     } else {
  //       resolve(answer.toLowerCase() === 'y')
  //     }
  //   })
  // })
  //
  // rl.close()
  /*****************************************************/

  const ok = true;

  if (ok) {
    outputFilenames.forEach((fn) => {
      const fullPath = path.join(graphDirectory, fn);
      fs.rmSync(fullPath);
    });
    console.log(`Tried removing ${outputFilenames.length} files`);
  } else {
    console.log("User canceled");
  }
};

const parseBenchmarkOutput = (stdoutstr) => {
  console.log(stdoutstr);
};

const runBenchmark = async (filename) => {
  const fullPath = path.join(__dirname, `graphs/${filename}`);
  const jarPath = path.join(__dirname, "306-a1-1.0-SNAPSHOT.jar");
  const command = `java -jar "${jarPath}" "${fullPath}" 2`;
  console.log(`running benchmark: [${filename}]`);
  return new Promise((resolve, reject) => {
    exec(command, (err, stdout) => {
      if (err) {
        console.error(err);
        reject(err)
      } else {
        console.log(stdout);
        resolve();
      }
    });
  });
};

const benchmark = async () => {
  const filesNames = getGraphFileNames();

  console.log(`Found ${filesNames.length} files to benchmark`);
  console.log("Running benchmark now...");

  for (let i = 3; i < filesNames.length; i++) {
    const filename = filesNames[i];
    const validResult = await runBenchmark(filename);
    console.log("Result");
    if (validResult) parseBenchmarkOutput(validResult);
  }
};

const main = async () => {
  await removeOutputFiles();
  // fileNames should be all valid now
  await benchmark();
};

main().then();
